import java.util.Stack;

public class Main {

	private static Stack<Integer> a, b, c;
	private static final int NUM = 3;
	
	public static void hanoi(int num, Stack<Integer> start, Stack<Integer> target, Stack<Integer> helper) {
		if (num > 0) {
			hanoi(num-1, start, helper, target);
			move(start, target);
			hanoi(num-1, helper, target, start);
		}
	}
	
	private static void move(Stack<Integer> from, Stack<Integer> to) {
		System.out.println("move from " + getNameStack(from) + " to " + getNameStack(to) + ":");
		to.push(from.pop());
		print();
	}

	private static String getNameStack(Stack<Integer> stack) {
		if (stack == a)
			return "a";
		if (stack == b)
			return "b";
		return "c";
	}

	private static void print() {
		for (int i = 0; i < NUM; i++) {
			printCell(a, i);
			printCell(b, i);
			printCell(c, i);
			System.out.println();
		}
		System.out.println(" a  b  c");
		System.out.println();
	}
	
	private static void printCell(Stack<Integer> stack, int i) {
		if (NUM <= stack.size() + i)
			System.out.print(" " + stack.get(i - NUM + stack.size()) + " ");
		else
			System.out.print(" . ");
	}
	
	private static void initialization(int num) {
		a = new Stack<Integer>();
		b = new Stack<Integer>();
		c = new Stack<Integer>();
		
		for (int i = num; i > 0; i--) {
			a.push(i);
		}
	}
	
	public static void main(String[] args) {
		initialization(NUM);
		print();
		hanoi(NUM, a, c, b);
	}

}
